Notes

=== Currently Broken ===

AdobeFlashDmgUnpacker and AdobeReaderDmgUnpacker are currently broken.
The Munki recipes for Flash and Adobe Reader have been redone so they do not reply on these processors (using instead the pkgs as offered by Adobe),
but the Pkg recipes for Flash and Reader are broken.


=== WORK/BUILD/CACHE Directory ===

Moving the work/build space out of the recipe directory is done.
Define the root of your desired workspace in CACHE_DIR in ~/Library/Preferences/com.googlecode.autopkg.plist (same as defining the munki repo):

% defaults read com.googlecode.autopkg CACHE_DIR
/Users/Shared/macautopkg/Cache

If this not defined, the cache space currently defaults to ~/Library/AutoPkg/Cache?

PkgCreator converts relative paths in a packaging request to absolute paths. Before the change to the work directory, 
each path was assumed to be relative to the recipe itself. That's no longer a good assumption. Relative paths should be discouraged.
So I changed the implementation so that the pkg_template.plist is now embedded in the actual recipe and can take advantage of variable substitution.
This allows us to do this:

<dict>
    <key>Processor</key>
    <string>PkgCreator</string>
    <key>Arguments</key>
    <dict>
        <key>pkgname</key>
        <string>%NAME%-%version%</string>
        <key>pkg_request</key>
        <dict>
            <key>pkgdir</key>
            <string>%RECIPE_CACHE_DIR%</string>
            <key>id</key>
            <string>org.videolan.vlc.pkg</string>
            <key>resources</key>
            <string>%RECIPE_DIR%/Resources</string>
            <key>options</key>
            <string>purge_ds_store</string>
            <key>chown</key>
            <array>
                <dict>
                    <key>path</key>
                    <string>Applications</string>
                    <key>user</key>
                    <string>root</string>
                    <key>group</key>
                    <string>admin</string>
                </dict>
            </array>
        </dict>
    </dict>
</dict>

Note that the pkgdir is our recipe _cache_ directory, but the resources are located relative to the recipe directory. 
The %RECIPE_CACHE_DIR% and the %RECIPE_DIR% need not be the same directory, and ideally are not.

=== New Processors ===

MunkiImporter
OracleJava7URLProvider
StopProcessingIf

=== Changed Processors ===

AdobeReaderURLProvider -- now works again

FirefoxURLProvider -- changes that enable it to be more universal; you can use this same provider to get
   the latest 3.6, ESR, or Release Channel build. We should be able to remove the Firefox36URLProvider.

PkgCreator -- changes discussed above

URLDownloader -- download_dir is no longer required and defaults to %RECIPE_CACHE_DIR%/downloads
  Support for If-Modified-Since and If-None-Match
  New output variable: download_changed 


Processors can live in the same directory as a recipe.
The new Munki/munkitools/munkitools.plist recipe makes use of a MunkitoolsPkgsFinder processor that finds the pkgs inside the top-level metapackage.
This required a new processor since the filenames of the metapackage and the subpackages change with each build. What an annoying developer!
But this processor is probably only of use to this recipe, so I've put it in the same directory as the recipe.

=== Recipe changes ===

I've updated every recipe.

All the Munki recipes now use the MunkiImporter processor.

The Firefox recipes now all use the FirefoxURLProvider.

I've added an OracleJava7 recipe as a starting point; definitely some work will need to be done with the pkginfo.

I've also added a munkitools recipe. This one downlaods the latest build from munkibuilds.org, finds the subpkgs
inside the metapkg, imports each subpackage, and sets up all the dependencies.
This makes it easy to deploy a new Munki release without requiring most of your clients to reboot: Munki can
do an unattended install of most of its components.
You'll note this recipe calls MunkiImporter four times. This has ramifications for the receipt...

=== autopkg changes ===

AutoPackager.process defines a cache/work directory for a recipe in env['RECIPE_CACHE_DIR']; this is available for 
variable substitution in recipes. Some Processors have been changed to default to using this cache directory.

autopkg -v now causes it to pretty-print any input variables that are set and any output variables for each recipe step.

autopkg -vv additionally causes the entire environment dictionary to be printed at the beginning and the end of the run
at it did formerly with just -v

AutoPackager.verify looks for step.Processor in the recipe directory before using an already imported processor.


