#!/usr/bin/env python
#
# Copyright 2013 Greg Neagle
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import sys
import os
import optparse
import plistlib
import pprint
import subprocess
import time

from autopkglib import BUNDLE_ID
from autopkglib import AutoPackagerError, AutoPackager


def makecatalogs(repo_path):
    # Generate arguments for makecatalogs.
    args = ["/usr/local/munki/makecatalogs", repo_path]
    
    # Call makecatalogs.
    try:
        proc = subprocess.Popen(
            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, err_out) = proc.communicate()
    except OSError as err:
        print >> sys.stderr, (
            "makecatalog execution failed with error code %d: %s" 
            % (err.errno, err.strerror))
    if proc.returncode != 0:
        print >> sys.stderr, (
            "makecatalogs failed: %s" % err_out)
    print "Munki catalogs rebuilt!"
    
    
def print_new_imports(new_imports):
    print "    %-24s %-16s %-32s %s" % (
        "Name", "Version", "Catalogs", "Pkginfo Path")
    print "    %-24s %-16s %-32s %s" % (
        "----", "-------", "--------", "------------")
    for item in new_imports:
        print "    %-24s %-16s %-32s %s" % (
            item["name"], item["version"], item["catalogs"],
            item["pkginfo_path"].partition("pkgsinfo/")[2])


def main(argv):
    # Parse arguments.
    p = optparse.OptionParser()
    p.set_usage("Usage: %prog [options] recipe.plist [recipe.plist ...]")
    p.add_option("-c", "--check", action="store_true",
                 help="Only check for new/changed downloads.")
    p.add_option("-k", "--key", action="append", dest="variables", default=[],
                 metavar="KEY=VALUE",
                 help=("Provide key/value pairs for recipe input. "
                       "Caution: values specified here will be applied "
                       "to all recipes."))
    p.add_option("-l", "--list", metavar="TEXT_FILE",
                 help="Path to a text file with a list of recipes to run.")
    p.add_option("-p", "--pkg", metavar="PKG_OR_DMG",
                 help=("Path to a pkg or dmg to provide to a recipe. "
                       "Downloading will be skipped."))
    p.add_option("-v", "--verbose", action="count", default=0,
                 help="Verbose output.")
    p.add_option("-r", "--recipe-dir", metavar="RECIPE_ROOT_DIR",
                 help=("Path to a directory that will be searched "
                       "recursively for all autopkg recipe plists."))
    options, argv = p.parse_args(argv)
    
    munki_repo_path = None
    new_downloads = []
    new_imports = []
    failures = []
    
    # Add variables from commandline.
    cli_values = {}
    for arg in options.variables:
        (key, sep, value) = arg.partition("=")
        if sep != "=":
            print >> sys.stderr, "Invalid variable [key=value]: %s" % arg
            print >> sys.stderr, p.get_usage()
            return 1
        cli_values[key] = value
        
    if options.pkg:
        cli_values["PKG"] = options.pkg
        
    recipe_paths = []
    recipe_paths.extend(argv[1:])
    if options.list:
        with open(options.list, "r") as fd:
            data = fd.read()
        recipes = [line for line in data.splitlines() 
                   if line and not line.startswith("#")]
        recipe_paths.extend(recipes)

    if options.recipe_dir:
        for root, dirs, files in os.walk(options.recipe_dir):
            for f in [r for r in files if r.endswith(".plist")]:
                recipe_path = os.path.join(root, f)
                try:
                    recipe_plist = plistlib.readPlist(recipe_path)
                except:
                    print >> sys.stderr, "Error reading plist file %s" % recipe_path
                    return 1
                if all(k in recipe_plist.keys() for k in ["Input", "Process"]):
                    recipe_paths.append(recipe_path)
                else:
                    print >> sys.stderr, ("Skipping plist %s as it's not a "
                                          "(properly-formatted) autopkg recipe plist." %
                                          recipe_path)
        
    if not recipe_paths:
        print >> sys.stderr, p.get_usage()
        return 1
        
    if len(recipe_paths) > 1 and options.pkg:
        print >> sys.stderr, (
            "-p/--pkg option can't be used with multiple recipes!")
        return 1
    
    run_results = []
    for recipe_path in recipe_paths:
        try:
            recipe = plistlib.readPlist(recipe_path)
        except BaseException as e:
            print >> sys.stderr, "Can't read %s: %s" % (recipe_path, e)
            continue
            
        if options.check:
            # remove steps from the end of the recipe Process until we find a 
            # EndOfCheckPhase step
            while recipe["Process"][-1]["Processor"] != "EndOfCheckPhase":
                del recipe["Process"][-1]
    
        print "Processing %s..." % recipe_path
        # Create empty plist object to hold preferences.
        prefs = plistlib.readPlistFromString(plistlib.writePlistToString({}))
    
        # Read preferences from system and user's library path.
        for libdir in ("/Library", os.path.expanduser("~/Library")):
            prefpath = os.path.join(libdir, "Preferences", BUNDLE_ID + ".plist")
            if os.path.exists(prefpath):
                try:
                    prefs = plistlib.readPlist(prefpath)
                except BaseException as e:
                    print >> sys.stderr, (
                        "Can't read preferences from %s: %s" 
                        % (prefpath, e))
    
        # Add RECIPE_PATH and RECIPE_DIR variables for use by processors
        prefs["RECIPE_PATH"] = os.path.abspath(recipe_path)
        prefs["RECIPE_DIR"] = os.path.dirname(os.path.abspath(recipe_path))
    
        # Add our verbosity level
        prefs["verbose"] = options.verbose
    
        autopackager = AutoPackager(options, prefs)
    
        exit_status = 0
        exit_string = ""
    
        try:
            autopackager.process_input_overrides(recipe, cli_values)
            autopackager.verify(recipe)
            autopackager.process(recipe)
        except AutoPackagerError as e:
            print "Failed."
            failure = {}
            failure["recipe"] = recipe_path
            failure["message"] = str(e)
            failures.append(failure)

        run_results.append(autopackager.results)
        # look through results for interesting info
        # and record for later summary and use
        for item in autopackager.results:
            if item.get("Recipe input"):
                # the assumption is that the MUNKI_REPO does not
                # change from recipe to recipe; if it does, running
                # makecatalogs later will affect only the "last"
                # MUNKI_REPO
                munki_repo_path = item["Recipe input"].get("MUNKI_REPO")
            if item.get("Processor") == "URLDownloader":
                if item["Output"].get("download_changed"):
                    new_downloads.append(item["Output"].get("pathname"))
            if item.get("Processor") == "MunkiImporter":
                if item["Output"].get("pkginfo_repo_path"):
                    imported_item = {}
                    imported_item["name"] = item["Output"]["munki_info"]["name"]
                    imported_item["version"] = item[
                                            "Output"]["munki_info"]["version"]
                    imported_item["catalogs"] = item[
                                            "Output"]["munki_info"]["catalogs"]
                    imported_item["pkginfo_path"] = item["Output"].get(
                                                            "pkginfo_repo_path")
                    imported_item["pkg_path"] = item["Output"].get(
                                                                "pkg_repo_path")
                    new_imports.append(imported_item)
                         
    # done running recipes, print a summary
    if failures:
        print
        print "The following recipes failed:"
        for item in failures:
            print "    %s" % item["recipe"]
            print "        %s" % item["message"]
            
    if new_downloads:
        print
        print "The following new items were downloaded:"
        for item in new_downloads:
            print "    %s" % item
    
    if new_imports:
        print
        print "The following new items were imported:"
        print_new_imports(new_imports)
        print
        # rebuild Munki catalogs since we imported new items
        makecatalogs(munki_repo_path)
            
    if not new_downloads and not new_imports:
        print
        print "No changes found."
        
    #pprint.pprint(run_results)
        

if __name__ == "__main__":
    sys.exit(main(sys.argv))
    
